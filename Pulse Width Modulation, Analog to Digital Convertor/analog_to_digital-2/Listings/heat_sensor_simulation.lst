C51 COMPILER V9.60.0.0   HEAT_SENSOR_SIMULATION                                            07/23/2020 15:44:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HEAT_SENSOR_SIMULATION
OBJECT MODULE PLACED IN .\Objects\heat_sensor_simulation.obj
COMPILER INVOKED BY: F:\Keil\C51\BIN\C51.EXE heat_sensor_simulation.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\Listings\heat_sensor_simulation.lst) TABS(2) OBJECT(.\Objects\heat_sensor_simulation.obj)

line level    source

   1          #include<reg52.h>
   2          #include<intrins.h>
   3          
   4          
   5          sbit Scl = P2^1;
   6          sbit Sda = P2^0;
   7          sbit selectionLatch = P2^7;
   8          sbit dataLatch = P2^6;
   9          sbit buzzer = P3^0;
  10          
  11          //unsigned char upperThres = 160; 
  12          unsigned char lowerThres = 50; 
  13          
  14          unsigned char code segData[] =     // 0 to 9 codes for segment display
  15          {0x3f,0x06,0x5b,
  16          0x4f,0x66,0x6d,
  17          0x7d,0x07,0x7f,0x6f}; 
  18          
  19          unsigned  char code segment[] =    // selection choice for one of the 6 display segments
  20          {0xfe,0xfd,0xfb,
  21          0xf7,0xef,0xdf};
  22          
  23          
  24          void iic_start();     // start condition for data transmision on the IIC protocol           
  25          void iic_send(unsigned char _data); // sending serial data using the IIC protocol
  26          unsigned char iic_read();   // reading serial data using the IIC protocol
  27          void iic_ack();     // acknowledge bit after sending a data byte
  28          void iic_noAck();   // no acknowledge after receiving the last byte 
  29          void iic_stop();    // stop condition after data transmision on the IIC protocol   
  30          void myDAC(unsigned char _byte); // digital to analog conversion
  31          unsigned char ADC(unsigned char channel); // analog to digital conversion
  32          
  33          void delay(char x);// delay function
  34          void seg_disp(char seconds, char minutes); // display to the 7 segment
  35          
  36          void warning_alarm(); // make the buzzer produce a warning alarm
  37            
  38          void main()
  39          {
  40   1        unsigned char num = 0;
  41   1        unsigned char flag = 0;
  42   1        unsigned char count = 0;
  43   1        unsigned char channel = 0;
  44   1        
  45   1        bit alarmFlag = 0;
  46   1        buzzer = 0; // turn off buzzer
  47   1      
  48   1        num = ADC(channel);
  49   1        
  50   1        
  51   1        
  52   1        while(1)
  53   1        {
  54   2          if(alarmFlag)
C51 COMPILER V9.60.0.0   HEAT_SENSOR_SIMULATION                                            07/23/2020 15:44:44 PAGE 2   

  55   2          {
  56   3            warning_alarm(); // warning alarm
  57   3          }
  58   2          count ++;
  59   2          if(count>=100)
  60   2          {
  61   3              num = ADC(channel); 
  62   3            /*
  63   3              if(num>=upperThres)
  64   3              {
  65   3                // turn on the LEDs
  66   3                P1 = 0;
  67   3              }
  68   3            */
  69   3              if(num<=lowerThres)
  70   3              {
  71   4                // turn on the alarm flag
  72   4                alarmFlag = 1;
  73   4              }
  74   3          }
  75   2            
  76   2          seg_disp(num,0);
  77   2        }
  78   1      }
  79          void iic_start()
  80          {
  81   1        
  82   1        Scl = 1;
  83   1        _nop_();
  84   1        Sda = 1;
  85   1        _nop_();
  86   1        Sda = 0;
  87   1        
  88   1      }
  89          void iic_send(unsigned char _data)
  90          {
  91   1        char oneByte = 8;
  92   1        char temp = 0x80; // 1000 0000
  93   1        //1000 0000
  94   1        //0XXX XXXX
  95   1        //1XXX XXXX
  96   1        
  97   1        while(oneByte)
  98   1        {
  99   2          Scl = 0;   // added new line 1
 100   2          if((temp&_data)==0)
 101   2          //if(temp&_data==0) // changed this line 
 102   2          {
 103   3            Sda = 0;
 104   3          }
 105   2          else
 106   2          {
 107   3            Sda = 1;
 108   3          }
 109   2          Scl = 0;
 110   2          _nop_();
 111   2          Scl = 1;
 112   2          _nop_();  // added new line 2
 113   2          Scl = 0;  // added new line 3
 114   2          
 115   2          _data = _data<<1;
 116   2          oneByte--;
C51 COMPILER V9.60.0.0   HEAT_SENSOR_SIMULATION                                            07/23/2020 15:44:44 PAGE 3   

 117   2        }
 118   1        
 119   1      }
 120          
 121          unsigned char iic_read()
 122          {
 123   1           unsigned char check = 0x80;
 124   1           unsigned char read = 0;
 125   1           unsigned char bitCount=8;
 126   1      
 127   1           Sda=1;
 128   1           while(bitCount)
 129   1           {
 130   2            Scl=0;
 131   2                _nop_();
 132   2            Scl=1;
 133   2            _nop_();
 134   2            if(Sda==1)
 135   2            {
 136   3              read = read|check;
 137   3            }
 138   2            check = check>>1;
 139   2            bitCount--;
 140   2          }
 141   1          return(read);
 142   1      }
 143          
 144          void iic_ack()
 145          {
 146   1        Sda = 0;
 147   1        Scl = 0;
 148   1        _nop_();
 149   1        Scl = 1;
 150   1        _nop_();
 151   1        Scl = 0;
 152   1        
 153   1      }
 154          void iic_noAck()
 155          {
 156   1        Scl = 0;
 157   1        Sda = 1;
 158   1        _nop_();
 159   1        Scl = 1;
 160   1        _nop_();
 161   1        Scl = 0;
 162   1        
 163   1      }
 164          void iic_stop()
 165          {
 166   1        Scl = 1;
 167   1        _nop_();
 168   1        Sda = 0;
 169   1        _nop_();
 170   1        Sda = 1;
 171   1        
 172   1      }
 173          
 174          void myDAC(unsigned char _byte)
 175          {
 176   1        iic_start();
 177   1        iic_send(0x90); // write to D/A convertor
 178   1        iic_ack();
C51 COMPILER V9.60.0.0   HEAT_SENSOR_SIMULATION                                            07/23/2020 15:44:44 PAGE 4   

 179   1        iic_send(0x40); //enable analog out
 180   1        iic_ack();
 181   1        iic_send(_byte); // send data
 182   1        iic_ack();
 183   1        iic_stop();
 184   1      } 
 185            
 186          
 187          
 188          void delay(unsigned char x)// delay function
 189          {
 190   1        char y;
 191   1        while(x--)
 192   1          for(y =0; y<120; y++);
 193   1      }
 194          
 195          
 196          void seg_disp(unsigned char seconds, unsigned char minutes) // display to the 7 segment
 197          {
 198   1            char tens, ones;
 199   1            char mtens, mones;
 200   1            char t = 1; 
 201   1        
 202   1            tens = seconds/50;
 203   1            ones = (seconds%50)/10;
 204   1        
 205   1            mtens = minutes/10;
 206   1            mones = minutes%10;
 207   1        
 208   1            //seconds
 209   1            P0 = segment[5];
 210   1            selectionLatch = 1;
 211   1            selectionLatch = 0;
 212   1            
 213   1            P0 = segData[ones]; 
 214   1            dataLatch = 1;
 215   1            dataLatch = 0;
 216   1            delay(t);
 217   1            P0 = segment[4];
 218   1            selectionLatch = 1;
 219   1            selectionLatch = 0;
 220   1        
 221   1            P0 = segData[tens]|0x80; 
 222   1            dataLatch = 1;
 223   1            dataLatch = 0;
 224   1            delay(t);
 225   1            // minutes
 226   1            /*
 227   1            P0 = segment[3];
 228   1            selectionLatch = 1;
 229   1            selectionLatch = 0;
 230   1            
 231   1            P0 = segData[mones]; 
 232   1            dataLatch = 1;
 233   1            dataLatch = 0;
 234   1            delay(t);
 235   1            P0 = segment[2];
 236   1            selectionLatch = 1;
 237   1            selectionLatch = 0;
 238   1        
 239   1            P0 = segData[mtens]; 
 240   1            dataLatch = 1;
C51 COMPILER V9.60.0.0   HEAT_SENSOR_SIMULATION                                            07/23/2020 15:44:44 PAGE 5   

 241   1            dataLatch = 0;
 242   1            delay(t);
 243   1            */
 244   1      }
 245          
 246          unsigned char ADC(unsigned char channel)
 247          {
 248   1        char readData;
 249   1        iic_start();
 250   1        iic_send(0x90); // write to D/A convertor
 251   1        iic_ack();
 252   1        iic_send(0x40|channel); //enable analog out and read from channel
 253   1        iic_ack();
 254   1        
 255   1        iic_start();
 256   1        iic_send(0x91); // send read address
 257   1        iic_ack();
 258   1        readData = iic_read();
 259   1        iic_noAck();
 260   1        iic_stop();
 261   1        return readData;
 262   1      } 
 263          
 264          void warning_alarm() // make the buzzer produce a warning alarm
 265          {
 266   1          char t = 30;
 267   1        
 268   1          buzzer = 1;
 269   1          delay(t*3);
 270   1          buzzer = 0;
 271   1          delay(t);
 272   1      }
 273            


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    397    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
